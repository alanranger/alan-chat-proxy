<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Alan Ranger — AI Bot</title>
  <meta name="color-scheme" content="dark">
  <style>
    :root{
      --bg:#0b1220;
      --card:#0f172a;
      --muted:#9fb2d9;
      --text:#e6edff;
      --line:#1b2540;
      --brand:#d98324; /* Alan orange */
      --pill:#13203e;
      --user:#1a2440;
      --bot:#101a33;
      --chip:#0e1831;
      --chip-bd:#213055;
      --shadow:0 8px 40px rgba(0,0,0,.45);
      --radius:16px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; background:var(--bg); color:var(--text);
      font:16px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Inter,Helvetica,Arial,sans-serif;
    }
    .wrap{max-width:940px; margin:32px auto; padding:0 16px}
    .card{
      background:var(--card); border:1px solid var(--line); border-radius:var(--radius);
      box-shadow:var(--shadow);
      overflow:hidden;
    }
    /* header */
    .brand{
      display:flex; align-items:center; gap:14px;
      padding:18px 18px; border-bottom:1px solid var(--line);
      position:relative;
    }
    .brand::before{
      content:""; position:absolute; left:0; top:0; right:0; height:6px; background:var(--brand);
    }
    .logo{
      width:40px; height:40px; border-radius:50%; background:#0b1530; display:grid; place-items:center;
      border:1px solid var(--line); overflow:hidden;
    }
    .logo img{width:100%; height:100%; object-fit:cover; display:block}
    .logo .mono{
      font-weight:700; font-size:18px; letter-spacing:.5px; color:#fff;
    }
    .title{font-weight:700; font-size:20px}
    .status{margin-left:auto; font-size:13px; color:var(--muted)}

    .lede{padding:0 18px 18px; color:var(--muted)}

    /* chat window */
    .chat{padding:18px; display:flex; flex-direction:column; gap:14px; min-height:50vh}
    .row{display:flex; gap:8px}
    .msg{
      max-width:75%;
      padding:12px 14px; border-radius:14px; border:1px solid var(--line);
      box-shadow:0 2px 12px rgba(0,0,0,.25);
      white-space:pre-wrap;
    }
    .bot{background:var(--bot)}
    .user{background:var(--user); margin-left:auto}
    .ghost{opacity:.85}
    .chips{display:flex; flex-wrap:wrap; gap:8px; margin-top:10px}
    .chip{
      display:inline-flex; align-items:center; gap:6px;
      padding:6px 10px; border-radius:999px; background:var(--chip);
      border:1px solid var(--chip-bd); color:var(--text); text-decoration:none;
      font-size:13px;
    }
    .chip:hover{filter:brightness(1.05)}
    .hint{font-size:13px; color:var(--muted); padding:0 18px 12px}

    /* input bar */
    .bar{display:flex; gap:10px; padding:12px; border-top:1px solid var(--line); background:#0c152b}
    .bar input[type="number"]{
      width:74px; text-align:center; background:#091127; color:var(--text);
      border:1px solid var(--line); border-radius:10px; padding:10px 8px;
    }
    .bar textarea{
      flex:1; min-height:46px; max-height:160px; resize:vertical;
      background:#0a142b; color:var(--text); border:1px solid var(--line); border-radius:12px;
      padding:12px 14px; outline:none;
    }
    .send{
      background:var(--brand); border:none; color:#fff; font-weight:700;
      border-radius:12px; padding:0 18px; min-width:88px; cursor:pointer;
    }
    .send:disabled{opacity:.6; cursor:not-allowed}
    .subtle{opacity:.8}

    .row-follow{display:flex; flex-wrap:wrap; gap:10px; padding:0 18px 12px}
    .btn-follow{
      background:var(--pill); border:1px solid var(--line); color:var(--text); border-radius:999px;
      padding:8px 12px; cursor:pointer; font-size:14px;
    }
    .btn-follow:hover{filter:brightness(1.06)}
    @media (max-width:720px){
      .msg{max-width:100%}
      .bar{flex-direction:column}
      .send{height:46px}
      .bar input[type="number"]{width:100%}
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card" id="shell">
      <!-- header -->
      <div class="brand">
        <div class="logo" id="logo">
          <!-- attempts to load /logo.png; falls back to monogram -->
          <img id="logoImg" src="/logo.png" alt="logo" onerror="this.remove();document.getElementById('logo').insertAdjacentHTML('beforeend','<div class=&quot;mono&quot;>AR</div>')">
        </div>
        <div class="title">Alan Ranger Assistant</div>
        <div class="status" id="status">ready</div>
      </div>

      <div class="lede">
        Ask me about workshops, courses, tips, or photography gear — I’ll give concise, cited answers.
      </div>

      <!-- chat window -->
      <div class="chat" id="chat">
        <div class="row">
          <div class="msg bot">Hi! I can help with workshops, tuition, and photography advice.</div>
        </div>
      </div>

      <div class="row-follow" id="follows" style="display:none"></div>
      <div class="hint">Answers cite sources; only your indexed pages are used.</div>

      <!-- input -->
      <div class="bar">
        <textarea id="q" placeholder="Ask a question… (Shift+Enter for newline)"></textarea>
        <input id="topk" type="number" min="1" max="16" value="8" title="topK (context docs)">
        <button id="send" class="send">Send</button>
      </div>
    </div>
  </div>

  <script>
    const $ = (id) => document.getElementById(id);
    const chat = $('chat');
    const statusEl = $('status');
    const sendBtn = $('send');
    const qEl = $('q');
    const topkEl = $('topk');
    const follows = $('follows');

    // Persist topK
    topkEl.value = localStorage.getItem('chat_topk') || '8';
    topkEl.addEventListener('change', () => {
      let v = Math.max(1, Math.min(16, parseInt(topkEl.value||'8',10)));
      topkEl.value = v.toString();
      localStorage.setItem('chat_topk', v.toString());
    });

    // Helpers
    function addUser(text){
      const row = document.createElement('div'); row.className = 'row';
      row.innerHTML = `<div class="msg user"></div>`;
      row.querySelector('.msg').textContent = text;
      chat.appendChild(row); chat.scrollTop = chat.scrollHeight;
      return row;
    }
    function addBot(text, ghost=false){
      const row = document.createElement('div'); row.className = 'row';
      row.innerHTML = `<div class="msg bot${ghost?' ghost':''}"></div>`;
      row.querySelector('.msg').textContent = text;
      chat.appendChild(row); chat.scrollTop = chat.scrollHeight;
      return row;
    }
    function addBotTyping(){
      return addBot('…', true);
    }
    function setBotText(row, text){
      const el = row.querySelector('.msg');
      el.classList.remove('ghost');
      el.textContent = text;
    }
    function typeText(row, finalText, speed=14){
      const el = row.querySelector('.msg');
      el.classList.remove('ghost');
      el.textContent = '';
      let i = 0;
      const tick = () => {
        i += 3; // chunked for quicker reveal
        el.textContent = finalText.slice(0, i);
        chat.scrollTop = chat.scrollHeight;
        if (i < finalText.length) requestAnimationFrame(tick);
      };
      requestAnimationFrame(tick);
    }
    function showCitations(urls){
      if (!Array.isArray(urls) || !urls.length) { follows.style.display='none'; return; }
      // Draw as link chips below the last answer bubble
      const row = document.createElement('div'); row.className = 'row';
      const holder = document.createElement('div'); holder.className = 'msg bot';
      const chips = document.createElement('div'); chips.className = 'chips';
      urls.forEach(u=>{
        const a=document.createElement('a');
        a.className='chip'; a.href=u; a.target='_blank'; a.rel='noopener noreferrer';
        a.textContent=u;
        chips.appendChild(a);
      });
      holder.appendChild(chips); row.appendChild(holder);
      chat.appendChild(row);
      chat.scrollTop=chat.scrollHeight;
    }
    function showFollowUps(items){
      follows.innerHTML='';
      if (!Array.isArray(items) || !items.length) { follows.style.display='none'; return; }
      items.slice(0,5).forEach(txt=>{
        const b=document.createElement('button');
        b.className='btn-follow'; b.textContent=txt;
        b.onclick=()=>{ qEl.value=txt; send(); };
        follows.appendChild(b);
      });
      follows.style.display='';
    }

    async function send(){
      const text = qEl.value.trim();
      if (!text) return;
      const k = Math.max(1, Math.min(16, parseInt(topkEl.value||'8',10)));
      qEl.value = '';
      sendBtn.disabled = true; statusEl.textContent = 'thinking…';

      addUser(text);
      const ghost = addBotTyping();

      try{
        const r = await fetch('/api/chat', {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ query:text, topK:k })
        });
        let body = null;
        try{ body = await r.json(); }catch{}
        if (!r.ok || !body || !body.ok){
          const msg = (body && (body.detail||body.error)) || `Server error (${r.status})`;
          setBotText(ghost, `Sorry — ${msg}.`);
          showFollowUps([]);
          showCitations([]);
          return;
        }
        const answer = (body.answer || '').toString();
        // type out
        typeText(ghost, answer);
        showFollowUps(body.followUps || []);
        showCitations(body.citations || []);
      }catch(err){
        setBotText(ghost, `Sorry — I had trouble contacting the server.`);
        showFollowUps([]);
        showCitations([]);
      }finally{
        sendBtn.disabled = false; statusEl.textContent = 'ready';
      }
    }

    // Events
    sendBtn.addEventListener('click', send);
    qEl.addEventListener('keydown', (e)=>{
      if (e.key === 'Enter' && !e.shiftKey){
        e.preventDefault();
        send();
      }
    });

    // Seed a helpful starter message if you like:
    // addBot("Try asking: **Which workshops are best for beginners?** or **What lenses are good for landscapes?**");
  </script>
</body>
</html>
